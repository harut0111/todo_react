{"version":3,"sources":["constants/app_const.js","components/Input.js","components/Todolist.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","container","display","flexWrap","input","margin","spacing","button","FilledTextFields","props","inputVal","classes","react_default","a","createElement","className","noValidate","autoComplete","onSubmit","e","preventDefault","Input","placeholder","inputProps","aria-label","autoFocus","value","onChange","onInputChange","target","onKeyDown","keyCode","onEnterPress","Button","onClick","onBtnClick","variant","color","Todolist","handleDoneAndRemove","tagName","_this","onItemDone","id","onItemRemove","parentElement","_this2","this","items","todoItems","map","item","classType","done","key","React","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","imputChangeHandler","setState","addTodoItems","state","todolist","concat","Math","random","itemRomoveHandler","console","log","newList","filter","itemDoneHandler","toConsumableArray","forEach","_this$state","components_Todolist","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.372951fd.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n    container: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n    },\r\n    input: {\r\n      margin: theme.spacing(1),\r\n    },\r\n    button: {\r\n      margin: theme.spacing(1),\r\n    },\r\n}));\r\n  ","import React from 'react';\r\nimport Input from '@material-ui/core/Input';\r\nimport Button from '@material-ui/core/Button';\r\nimport {useStyles} from '../constants/app_const.js';\r\n\r\n\r\nexport default function FilledTextFields(props) {\r\n\r\n    //set by me\r\n    const {inputVal} = props;\r\n\r\n    function handleChange(e) {\r\n        props.onInputChange(e.target.value);\r\n    }\r\n\r\n    //call addTodoItems() method on \"Enter\" press\r\n    function handleEnterPress(e) {\r\n        if(e.keyCode === 13) props.onEnterPress();\r\n    }\r\n\r\n    // set by Material UI\r\n    const classes = useStyles();\r\n    // this function added for prevent submit event (by me)\r\n    function submitHandler(e) {\r\n        e.preventDefault();\r\n    }\r\n\r\n    function handleBtnClick() {\r\n      props.onBtnClick();\r\n    }\r\n\r\n    return (\r\n        <form className={classes.container} noValidate autoComplete=\"off\" onSubmit={submitHandler}>\r\n          <Input\r\n            placeholder=\"what to do ?\"\r\n            className={classes.input}\r\n            inputProps={{'aria-label': 'Description', }}\r\n            \r\n            //set by me\r\n            autoFocus\r\n            /* multiline={true} */\r\n            value={inputVal}\r\n            onChange = {handleChange}\r\n            onKeyDown={handleEnterPress}\r\n          />\r\n  \r\n          <Button \r\n            onClick={handleBtnClick} \r\n            variant=\"contained\" color=\"primary\" \r\n            className={classes.button}\r\n          >\r\n            add to do\r\n          </Button>\r\n        </form>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n/* import React from 'react';\r\nimport FilledTextFields from './MaterialUI_Input'\r\n\r\n\r\nclass Input extends React.Component {\r\n    \r\n    handleChange = (e) => {\r\n        this.props.onInputChange(e.target.value);\r\n    }\r\n\r\n    //call addTodoItems() method on \"Enter\" press\r\n    handleEnterPress = (e) => {\r\n        if(e.keyCode === 13) this.props.onEnterPress();\r\n    }\r\n    \r\n    render() {\r\n        const {inputVal} = this.props;\r\n\r\n        return  <>\r\n                <input \r\n                    placeholder=\"what to do?\"\r\n                    autoFocus\r\n                    value = {inputVal}\r\n                    onChange = {this.handleChange}\r\n                    onKeyDown={this.handleEnterPress}\r\n                ></input>\r\n                <FilledTextFields />\r\n\r\n                </>\r\n    }\r\n}\r\n\r\nexport default Input; */\r\n","import React from 'react';\r\n\r\nclass Todolist extends React.Component {\r\n\r\n    handleDoneAndRemove = (e) => {\r\n\r\n        e.target.tagName === \"LI\" ? (\r\n            this.props.onItemDone(e.target.id) \r\n            ) : (\r\n            this.props.onItemRemove(e.target.parentElement.id) );    \r\n    }\r\n    \r\n    render() {\r\n        const { todoItems } = this.props;\r\n   \r\n        const items = todoItems.map(item => {\r\n            if(item.value) {\r\n                const classType = item.done ? \"done\" : \"\";\r\n                return (\r\n                    <li className={classType} \r\n                        key={item.id}\r\n                        id={item.id}\r\n                        onClick={this.handleDoneAndRemove}\r\n                    >\r\n                        {item.value} <span onClick={this.handleDoneAndRemove}>X</span> \r\n                    </li>\r\n                ) \r\n            }\r\n            return null;\r\n        })\r\n\r\n        return (\r\n            <ul>  \r\n                {items}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Todolist;","import './App.css';\nimport React from 'react';\nimport Input from './components/Input.js';\nimport Todolist from './components/Todolist.js';\n\n\nclass App extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\",\n      todolist: [\n        {id: Math.random(), value: \"I'm gonna do...\", done: false}, \n        {id: Math.random(), value: \"I've already done it\", done: true}\n      ]\n    };\n  }\n\n  // store input value\n  imputChangeHandler = (value) => {\n      this.setState({input: value})\n  }\n\n  //add new Items \n  addTodoItems = () => {\n    const {input} = this.state;\n\n    this.setState(state => ({\n      todolist: state.todolist.concat({id: Math.random(), value: input, done: false}),\n      input: \"\"\n    }));\n  }\n\n\n  // remove item from list \n  itemRomoveHandler = (key) => {\n    console.log(key)\n    const newList = this.state.todolist.filter(item => {\n      return item.id !== +key;\n    });  \n    console.log(newList)\n    this.setState({todolist: newList});\n  }\n\n  // mark item as done\n  itemDoneHandler = (key) => {\n    const newList = [...this.state.todolist]\n    newList.forEach(item => {\n      if(item.id === +key) item.done = !item.done\n    })\n\n    this.setState({todolist: newList});\n  }\n\n  \n  render() {\n    const {input, todolist} = this.state;\n    return (\n      <div className=\"App\">\n        <h1>To Do List...</h1>\n\n        <div className=\"inputAndButton\">\n          <Input \n            inputVal={input} \n            onInputChange={this.imputChangeHandler}\n            onEnterPress={this.addTodoItems}\n            onBtnClick={this.addTodoItems}\n            />\n        </div>\n\n        <Todolist \n          todoItems={todolist} \n          onItemRemove={this.itemRomoveHandler}\n          onItemDone={this.itemDoneHandler}/>\n      </div>\n   )\n  }\n}\n\nexport default App; \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}