{"version":3,"sources":["components/Input.js","components/Todolist.js","App.js","serviceWorker.js","index.js"],"names":["Input","handleChange","e","_this","props","onInputChange","target","value","inputVal","this","react_default","a","createElement","type","onChange","React","Component","Todolist","handleDoneAndRemove","tagName","onItemDone","id","onItemRemove","parentElement","_this2","items","todoItems","map","item","classType","done","className","key","onClick","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","imputChangeHandler","setState","input","addTodoItems","state","todolist","concat","Math","random","itemRomoveHandler","console","log","newList","filter","itmeDoneHandler","toConsumableArray","forEach","_this$state","components_Input","components_Todolist","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3e816251.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Input extends React.Component {\r\n    \r\n    handleChange = (e) => {\r\n        this.props.onInputChange(e.target.value);\r\n    }\r\n    \r\n    render() {\r\n        const {inputVal} = this.props;\r\n        return <input \r\n                    type=\"text\"\r\n                    value = {inputVal}\r\n                    onChange = {this.handleChange}\r\n                ></input>\r\n    }\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\n\r\nclass Todolist extends React.Component {\r\n\r\n    handleDoneAndRemove = (e) => {\r\n\r\n        e.target.tagName === \"LI\" ? (\r\n            this.props.onItemDone(e.target.id) \r\n            ) : (\r\n            this.props.onItemRemove(e.target.parentElement.id) );    \r\n    }\r\n\r\n    render() {\r\n        const { todoItems } = this.props;\r\n   \r\n        const items = todoItems.map(item => {\r\n            if(item.value) {\r\n                const classType = item.done ? \"todoList done\" : \"todoList\"\r\n                return (\r\n                    <li className={classType} \r\n                        key={item.id}\r\n                        id={item.id}\r\n                        onClick={this.handleDoneAndRemove}\r\n                    >\r\n                        {item.value} <span onClick={this.handleDoneAndRemove}>X</span> \r\n                    </li>\r\n                ) \r\n            }\r\n            return null;\r\n        })\r\n\r\n        return (\r\n            <ul>  \r\n                {items}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Todolist;","import './App.css';\nimport React from 'react';\nimport Input from './components/Input.js';\nimport Todolist from './components/Todolist.js';\n\nclass App extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\",\n      todolist: [\n        {id: Math.random(), value: \"Hello\", done: false}, \n        {id: Math.random(), value: \"World\", done: true}\n      ]\n    };\n  }\n\n  // store input value\n  imputChangeHandler = (value) => {\n      this.setState({input: value})\n  }\n\n  //add new Items \n  addTodoItems = () => {\n    const {input} = this.state;\n\n    this.setState(state => ({\n      todolist: state.todolist.concat({id: Math.random(), value: input, done: false})\n    }));\n  }\n\n\n  // remove item from list\n  itemRomoveHandler = (key) => {\n    console.log(key)\n    const newList = this.state.todolist.filter(item => {\n      return item.id !== +key;\n    });  \n    console.log(newList)\n    this.setState({todolist: newList});\n  }\n\n  //\n  itmeDoneHandler = (key) => {\n    const newList = [...this.state.todolist]\n    newList.forEach(item => {\n      if(item.id === +key) item.done = !item.done\n    })\n\n    this.setState({todolist: newList});\n  }\n\n\n  render() {\n    const {input, todolist} = this.state;\n    return (\n      <div className=\"App\">\n        <h1>To Do List</h1>\n\n        <div className=\"inputAndButton\">\n          <Input inputVal={input} onInputChange={this.imputChangeHandler}/>\n          <button onClick={this.addTodoItems}>add to do</button>\n        </div>\n\n        <Todolist \n          todoItems={todolist} \n          onItemRemove={this.itemRomoveHandler}\n          onItemDone={this.itmeDoneHandler}/>\n      </div>\n   )\n  }\n}\n\nexport default App; \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}