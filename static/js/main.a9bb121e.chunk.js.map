{"version":3,"sources":["components/Input.js","components/Todolist.js","App.js","serviceWorker.js","index.js"],"names":["Input","handleChange","e","_this","props","onInputChange","target","value","inputVal","this","react_default","a","createElement","type","onChange","React","Component","Todolist","handleRemove","onItemRemove","currentTarget","parentElement","id","_this2","items","todoItems","map","text","index","className","key","onClick","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","imputChangeHandler","setState","input","addTodoItems","state","todolist","concat","itemRomoveHandler","newList","toConsumableArray","splice","_this$state","components_Input","components_Todolist","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a9bb121e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Input extends React.Component {\r\n    \r\n    handleChange = (e) => {\r\n        this.props.onInputChange(e.target.value);\r\n    }\r\n    \r\n    render() {\r\n        const {inputVal} = this.props;\r\n        return <input \r\n                    type=\"text\"\r\n                    value = {inputVal}\r\n                    onChange = {this.handleChange}\r\n                ></input>\r\n    }\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\n\r\nclass Todolist extends React.Component {\r\n\r\n    handleRemove = (e) => {\r\n        this.props.onItemRemove(e.currentTarget.parentElement.id);\r\n    }\r\n\r\n    render() {\r\n        const { todoItems } = this.props;\r\n        const items = todoItems.map((text, index) => (\r\n            text ?\r\n                <li className=\"todoList\" \r\n                    key={index}\r\n                    id={index}\r\n                    >\r\n                    {text} <span onClick={this.handleRemove}>X</span> \r\n                </li> : text\r\n            )\r\n        )\r\n        return (\r\n            <ul>  \r\n                {items}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Todolist;","import './App.css';\nimport React from 'react';\nimport Input from './components/Input.js';\nimport Todolist from './components/Todolist.js';\n\nclass App extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\",\n      todolist: ['asd', 'adf88'],\n    };\n  }\n\n  imputChangeHandler = (value) => {\n      this.setState({input: value})\n  }\n//add new Items\n  addTodoItems = () => {\n    const {input} = this.state;\n\n    this.setState((state) => ({\n      todolist: state.todolist.concat(input)\n    }));\n  }\n\n  itemRomoveHandler = (index) => {\n    const newList = [...this.state.todolist];\n    newList.splice(index, 1);\n    \n    this.setState({todolist: newList});\n  }\n\n  render() {\n    const {input, todolist} = this.state;\n    return (\n      <div className=\"App\">\n        <h1>To Do List</h1>\n\n        <div className=\"inputAndButton\">\n          <Input inputVal={input} onInputChange={this.imputChangeHandler}/>\n          <button onClick={this.addTodoItems}>add to do</button>\n        </div>\n\n        <Todolist todoItems={todolist} onItemRemove={this.itemRomoveHandler}/>\n      </div>\n   )\n  }\n}\n\nexport default App; \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}