{"version":3,"sources":["constants/app_const.js","components/Input.js","components/deleteTooltip.js","components/Todolist.js","config/FireBase.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","container","display","flexWrap","input","margin","spacing","button","FilledTextFields","props","inputVal","classes","react_default","a","createElement","className","noValidate","autoComplete","onSubmit","e","preventDefault","Input","placeholder","inputProps","aria-label","autoFocus","value","onChange","onInputChange","target","onKeyDown","keyCode","onEnterPress","Button","onClick","onBtnClick","variant","color","SimpleTooltips","Tooltip","title","IconButton","Delete_default","Todolist","handleDoneAndRemove","tagName","onItemDone","id","onItemRemove","currentTarget","items","todoItems","map","item","classType","done","key","firebase","require","initializeApp","apiKey","authDomain","projectId","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","imputChangeHandler","setState","addTodoItems","state","randomNum","String","Date","getTime","trim","db","collection","doc","set","then","todolist","concat","catch","error","console","itemRomoveHandler","newList","filter","delete","itemDoneHandler","toConsumableArray","itemDone","forEach","merge","_this2","firestore","get","querySnapshot","data","_this$state","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3ae48e82.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n    container: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n    },\r\n    input: {\r\n      margin: theme.spacing(1),\r\n    },\r\n    button: {\r\n      margin: theme.spacing(1),\r\n    },\r\n}));\r\n  ","import React from 'react';\r\nimport Input from '@material-ui/core/Input';\r\nimport Button from '@material-ui/core/Button';\r\nimport {useStyles} from '../constants/app_const.js';\r\n\r\n\r\nexport default function FilledTextFields(props) {\r\n\r\n    //set by me\r\n    const {inputVal} = props;\r\n\r\n    function handleChange(e) {\r\n        props.onInputChange(e.target.value);\r\n    }\r\n\r\n    //call addTodoItems() method on \"Enter\" press\r\n    function handleEnterPress(e) {\r\n        if(e.keyCode === 13) props.onEnterPress();\r\n    }\r\n\r\n    // set by Material UI\r\n    const classes = useStyles();\r\n    // this function added for prevent submit event (by me)\r\n    function submitHandler(e) {\r\n        e.preventDefault();\r\n    }\r\n\r\n    function handleBtnClick() {\r\n      props.onBtnClick();\r\n    }\r\n\r\n    return (\r\n        <form className={classes.container} noValidate autoComplete=\"off\" onSubmit={submitHandler}>\r\n          <Input\r\n            placeholder=\"what to do ?\"\r\n            className={classes.input}\r\n            inputProps={{'aria-label': 'Description', }}\r\n            \r\n            //set by me\r\n            autoFocus\r\n            /* multiline={true} */\r\n            value={inputVal}\r\n            onChange = {handleChange}\r\n            onKeyDown={handleEnterPress}\r\n          />\r\n  \r\n          <Button \r\n            onClick={handleBtnClick} \r\n            variant=\"contained\" color=\"primary\" \r\n            className={classes.button}\r\n          >\r\n            add to do\r\n          </Button>\r\n        </form>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n/* import React from 'react';\r\nimport FilledTextFields from './MaterialUI_Input'\r\n\r\n\r\nclass Input extends React.Component {\r\n    \r\n    handleChange = (e) => {\r\n        this.props.onInputChange(e.target.value);\r\n    }\r\n\r\n    //call addTodoItems() method on \"Enter\" press\r\n    handleEnterPress = (e) => {\r\n        if(e.keyCode === 13) this.props.onEnterPress();\r\n    }\r\n    \r\n    render() {\r\n        const {inputVal} = this.props;\r\n\r\n        return  <>\r\n                <input \r\n                    placeholder=\"what to do?\"\r\n                    autoFocus\r\n                    value = {inputVal}\r\n                    onChange = {this.handleChange}\r\n                    onKeyDown={this.handleEnterPress}\r\n                ></input>\r\n                <FilledTextFields />\r\n\r\n                </>\r\n    }\r\n}\r\n\r\nexport default Input; */\r\n","import React from 'react';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\n\r\n\r\nexport default function SimpleTooltips() {\r\n  return (\r\n    <span>\r\n      <Tooltip title=\"Delete\">\r\n        <IconButton aria-label=\"Delete\">\r\n          <DeleteIcon />\r\n        </IconButton>\r\n      </Tooltip>\r\n    </span>\r\n  );\r\n}","import React from 'react';\r\nimport SimpleTooltips from './deleteTooltip';\r\n\r\nexport default function Todolist(props) {\r\n\r\n    function handleDoneAndRemove(e) {\r\n\r\n        e.target.tagName === \"LI\" ? (\r\n        props.onItemDone(e.target.id) \r\n        ) : (\r\n        props.onItemRemove(e.currentTarget.id) );    \r\n    }\r\n    \r\n    const { todoItems } = props;\r\n\r\n    const items = todoItems.map(item => {\r\n        \r\n        const classType = item.done ? \"done\" : \"\";\r\n        return (\r\n            <li className={classType} \r\n                key={item.id}\r\n                id={item.id}\r\n                onClick={handleDoneAndRemove}\r\n            >\r\n                {item.value} <SimpleTooltips onClick={handleDoneAndRemove}/>{/* <span >X</span> */} \r\n            </li>\r\n        ) \r\n    })\r\n\r\n    return (\r\n        <ul>  \r\n            {items}\r\n        </ul>\r\n    )\r\n}","/* const firebase = require(\"firebase\");\r\n    // Required for side-effects\r\n    require(\"firebase/firestore\"); */\r\n\r\n\r\nconst firebase = require('firebase/app');\r\nrequire('firebase/firestore');\r\n \r\nfirebase.initializeApp({\r\n    apiKey: 'AIzaSyA-NlEgvbcRcsOT_ZP1j24kbZTKIsViHA4',\r\n    authDomain: 'todoapp-harut.firebaseapp.com',\r\n    projectId: 'todoapp-harut'\r\n});\r\n\r\nexport default firebase;","import './App.css';\nimport React from 'react';\nimport Input from './components/Input.js';\nimport Todolist from './components/Todolist.js';\nimport firebase from './config/FireBase.js';\n\n\n\nclass App extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\",\n      todolist: [\n        /* {id: Math.random(), value: \"I'm gonna do...\", done: false}, \n        {id: Math.random(), value: \"I've already done it\", done: true} */\n      ]\n    };\n  }\n\n\n\n  /* ---- STORE INPUT VALUE ON STATE ---- */\n  imputChangeHandler = (value) => {\n      this.setState({input: value})\n  }\n\n\n  \n  /* ---- ADD NEW ITEMS ON LIST ---- */\n  addTodoItems = () => {\n\n    const {input} = this.state;\n    const randomNum = String( new Date().getTime() );\n    if(input.trim()) {\n      \n      // Add a new document in collection \"listItem\" on firebase\n      this.db.collection(\"listItem\").doc(randomNum ).set({\n        value: input, \n        done: false\n      })\n      .then(() => { \n        //here we sure that data has been set on firebase\n        this.setState(state => ({\n          todolist: state.todolist.concat({\n            id: randomNum, \n            value: input, \n            done: false\n          }),\n          input: \"\"\n        }));\n        /////\n      })\n      .catch(function(error) {\n        console.error(\"Error writing document: \", error);\n      });\n    }\n  }\n\n\n  /* ---REMOVE ITEM FROM LIST--- */\n  itemRomoveHandler = (key) => {\n\n    //filter removed item\n    const newList = this.state.todolist.filter(item => {\n      return item.id !== key;\n    }); \n\n    //delete from firebase then change \"todolist\" state\n    this.db.collection(\"listItem\").doc(key).delete().then(() => {\n      this.setState({todolist: newList});\n    }).catch(function(error) {\n      console.error(\"Error removing document: \", error);\n    });\n  }\n\n\n\n  /* --- MARK ITEM AS DONE ---- */\n  itemDoneHandler = (key) => {\n    \n    const newList = [...this.state.todolist]\n    let itemDone = false;\n    newList.forEach(item => {\n      if(item.id === key) itemDone = item.done = !item.done\n    })\n\n    // at first change on firebase for sure then \"todolist\" state\n    this.db.collection(\"listItem\").doc(key).set({\n      done: itemDone\n    },{ merge: true })\n    .then(() => {\n      this.setState({todolist: newList});\n    })\n    .catch(function(error) {\n        console.error(\"Error writing document: \", error);\n    });    \n  }\n\n\n  /* this method called after createing component\n  so it is the best place to get data from firebase */\n\n  componentDidMount() {\n    \n    this.db = firebase.firestore();\n    // get date then set it on state which lead on re-render\n    this.db.collection(\"listItem\").get().then(querySnapshot => {\n      querySnapshot.forEach(doc => {\n          this.setState(state => ({\n            todolist: state.todolist.concat({\n              id: doc.id, \n              value: doc.data().value, \n              done: doc.data().done\n            }),\n          }));\n          \n        //console.log(`${doc.id} => ${doc.data().value} => ${doc.data().done}`);\n      });\n    });\n  }\n\n\n  render() {\n    const {input, todolist} = this.state;\n    return (\n      <div className=\"App\">\n        <h1>To Do List...</h1>\n\n        <div className=\"inputAndButton\">\n          <Input \n            inputVal={input} \n            onInputChange={this.imputChangeHandler}\n            onEnterPress={this.addTodoItems}\n            onBtnClick={this.addTodoItems}\n            />\n        </div>\n\n        <Todolist \n          todoItems={todolist} \n          onItemRemove={this.itemRomoveHandler}\n          onItemDone={this.itemDoneHandler}\n        />\n      </div>\n   )\n  }\n}\n\nexport default App; \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}